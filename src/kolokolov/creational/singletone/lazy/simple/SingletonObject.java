package kolokolov.creational.singletone.lazy.simple;


/**
 * Наверное самый простой способ реализовать Singleton с отложенной (ленивой) инициализацией
 * Инстанс объекта не будет создан до того момента, пока мы не вызовем getInstance() хотя бы 1 раз
 * <p>
 * Плюсы:
 * + Простой
 * + Отложенная инициализация (не грузит лишний раз память)
 * + Достаточно производительный
 * Минусы:
 * - ПотокоНЕзащищенный. При использовании из несколькх покотов может вести себя неадекватно
 */
class SingletonObject {

    /**
     * Статическая ссылка на объект, которая "заполниться" реальным побъектом при первом запросе
     * getInstance()
     */
    private static SingletonObject instance;

    /**
     * Приватный конструктор, что бы нельзя было создать объект через оператор new
     * так как оператор new всегда возвращает НОВЫЙ объект
     */
    private SingletonObject() {
    }

    /**
     * При первом вызове ссылка instance будет null и создасться новый объект
     * все последующие вызовы будут возвращать уже ранее созданный объект
     *
     * @return один и тот же экземпляр класса {@link SingletonObject}
     */
    public static SingletonObject getInstance() {
        if (instance == null) {
            instance = new SingletonObject();
        }
        return instance;
    }
}
